<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:camel="http://camel.apache.org/schema/spring"
  xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
 
  <bean id="bridgePropertyPlaceholder" class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer">
    <property name="location" value="classpath:application.properties"/>
  </bean>
 
  <bean id="activemq"
    class="org.apache.activemq.camel.component.ActiveMQComponent">
    <property name="requestTimeout" value="2" />
    <property name="testConnectionOnStartup" value="true" />
    <property name="brokerURL" value="${activemq.brokerUrl}"/>
  </bean>

  <bean id="myLogger" class="org.slf4j.LoggerFactory" factory-method="getLogger">
      <constructor-arg value="ca.umanitoba.fc3indexer"/>
  </bean>
  
  <bean id="latestAggregation" class="org.apache.camel.processor.aggregate.UseLatestAggregationStrategy"/>

  <bean id="stringConcatAggregation" class="ca.umanitoba.fc3indexer.StringConcatAggregator"/>
 
  <camelContext id="fedora3-solr-indexer" xmlns="http://camel.apache.org/schema/spring"
      xmlns:foxml="info:fedora/fedora-system:def/foxml#">
 
      <restConfiguration component="servlet"/>

      <rest path="/">
          <description>Rest endpoint to reindex a specific PID</description>
          <get uri="/{pid}">
              <to uri="seda:to_reindex?exchangePattern=InOnly"/>
          </get>
      </rest>

      <route id="rest-to-reindex">
          <description>Parse REST request and re-index directly, skipping JMS queue</description>
          <from uri="seda:to_reindex"/>
          <setProperty propertyName="pid"><simple>${in.header.pid}</simple></setProperty>
          <removeHeaders pattern="*"/>
          <setHeader headerName="pid"><simple>${property.pid}</simple></setHeader>
          <setHeader headerName="methodName"><constant>indexObject</constant></setHeader>
          <to uri="seda:aggregated"/>
          <log message="Added ${property.pid} to direct reindex" loggingLevel="INFO" loggerRef="myLogger"/>
      </route>

     <route id="fedora-aggregator">
         <description>Fedora Message aggregator (10 sec inactivity timeout)</description>
         <from uri="activemq:{{activemq.queuename}}"/>
         <log message="Raw Fedora Object: ${header.pid}, method: ${header.methodName}" loggingLevel="DEBUG" loggerRef="myLogger"/>
         <aggregate strategyRef="latestAggregation" completionTimeout="10000">
             <correlationExpression>
                 <simple>${header.pid}</simple>
             </correlationExpression>
             <log message="Aggregated Fedora Object: ${header.pid}, method: ${header.methodName}" loggingLevel="INFO" loggerRef="myLogger"/>
             <to uri="seda:aggregated"/>
         </aggregate>
      </route>
     
      <route id="fedora-routing">
          <description>Fedora message routing</description>
          <from uri="seda:aggregated"/>
          <choice>
              <when>
                  <simple>${header.methodName} == 'purgeObject'</simple>
                  <to uri="seda:fedora.delete"/>
              </when>
              <otherwise>
                  <setHeader headerName="Exchange.HTTP_METHOD">
                      <constant>GET</constant>
                  </setHeader>
                  <setHeader headerName="Exchange.HTTP_PATH">
                      <simple>{{fcrepo.basePath}}/objects/$simple{header.pid}/objectXML</simple>
                  </setHeader>
                  <log message="Getting foxml ${header.pid}" loggingLevel="DEBUG" loggerRef="myLogger"/>
                  <to uri="http4://{{fcrepo.baseUrl}}/?authUsername={{fcrepo.authUser}}&amp;authPassword={{fcrepo.authPassword}}"/>
                  <convertBodyTo type="org.w3c.dom.Document"/>
                  <to uri="seda:fedora.insert"/>
              </otherwise>
          </choice>
      </route>
 
      <route id="fedora-insert-multicaster">
          <description>Fedora Message insert multicaster</description>
          <from uri="seda:fedora.insert"/>
          <log message="aggregating ${header.pid}" loggingLevel="DEBUG" loggerRef="myLogger"/>
          <choice>
              <when>
                  <!-- Object is Active so index/re-index -->
                  <xpath>/foxml:digitalObject/foxml:objectProperties/foxml:property[@NAME = 'info:fedora/fedora-system:def/model#state' and @VALUE = 'Active']</xpath>
                  <!-- Store FOXML in a property for later -->
                  <setProperty propertyName="foxml"><simple>${body}</simple></setProperty>
                  <!-- Send it to get the FOXML properties indexed -->
                  <to uri="direct:fedora.properties"/>
                  <!-- Store those Solr fields in a property -->
                  <setProperty propertyName="foxml_properties"><simple>${body}</simple></setProperty>
                  <!-- Return the FOXML body to start processing datastreams -->
                  <setBody><simple>${property.foxml}</simple></setBody>
              
                  <!-- Split on datastream and process each separately and in parallel.
                       Aggregate them back together using the String Concatenate method. -->
                  <split strategyRef="stringConcatAggregation">
                      <xpath>/foxml:digitalObject/foxml:datastream</xpath>
                      <to uri="direct:fedora.dsProcess"/>
                  </split>
                  
                  <log message="Combined and ready" loggingLevel="TRACE" loggerRef="myLogger"/>
                  <!--  combine the object properties fields and the transformed datastreams, plus wrap in <doc> -->
              <setBody><simple>&lt;update&gt;&lt;doc&gt;${property.foxml_properties}${body}&lt;/doc&gt;&lt;/update&gt;</simple></setBody>
                  <to uri="seda:solr.update"/>
              </when>
              <otherwise>
                  <!-- Delete from the Solr index -->
                  <to uri="seda:solr.delete"/>
              </otherwise>
          </choice>
      </route>
      
      <route id="fedora-foxml-properties">
          <description>Process the FOXML digitalObject XML to get some base Solr fields (including PID)</description>
          <from uri="direct:fedora.properties"/>
          <!-- Grab the digitalObject nodes from the XML -->
          <setBody><xpath>/foxml:digitalObject</xpath></setBody>
          <!-- Set some headers that are passed as parameters to the XSLT -->
          <setHeader headerName="pid"><simple>${header.pid}</simple></setHeader>
          <setHeader headerName="FEDORAUSER"><simple>{{fcrepo.authUser}}</simple></setHeader>
          <setHeader headerName="FEDORAPASS"><simple>{{fcrepo.authPassword}}</simple></setHeader>
          <setHeader headerName="FEDORAURL"><simple>{{fcrepo.baseUrl}}</simple></setHeader>
          <setHeader headerName="FEDORAPATH"><simple>{{fcrepo.basePath}}</simple></setHeader>
        
          <log message="Trying {{foxmlXslt.path}}/FOXML.xslt for PID $simple{header.pid}" loggingLevel="DEBUG" loggerRef="myLogger"/>
          <to uri="xslt:{{foxmlXslt.path}}/FOXML.xslt?transformerFactoryClass=org.apache.xalan.processor.TransformerFactoryImpl" />
      </route>
      
      <route id="fedora-ds-process">
          <description>Process the individual datastreams and return the Solr fields for their data.</description>
          <from uri="direct:fedora.dsProcess"/>

          <!-- Set some headers that are passed as parameters to the XSLT -->
          <setHeader headerName="DSID"><xpath resultType="java.lang.String">/foxml:datastream/@ID</xpath></setHeader>
          <setHeader headerName="mimetype"><xpath resultType="java.lang.String">/foxml:datastream/foxml:datastreamVersion[last()]/@MIMETYPE</xpath></setHeader>
          <choice>
              <when>
                  <simple>${header.mimetype} == 'text/xml' or ${header.mimetype} == 'application/xml' or ${header.mimetype} == 'application/rdf+xml' or ${header.mimetype} == 'text/html'</simple>
                  <doTry>
                      <!-- These define what we get from Fedora and how -->
                      <setHeader headerName="Exchange.HTTP_METHOD">
                          <constant>GET</constant>
                      </setHeader>
                      <setHeader headerName="Exchange.HTTP_PATH">
                          <simple>{{fcrepo.basePath}}/objects/$simple{header.pid}/datastreams/$simple{header.DSID}/content</simple>
                      </setHeader>
                      <log message="Getting datastream ${header.DSID} for ${header.pid} with mimetype ${header.mimetype}" loggingLevel="DEBUG" loggerRef="myLogger"/>
                      <!-- This actually calls to Fedora to get the above Path with Method -->
                      <to uri="http4://{{fcrepo.baseUrl}}/?authUsername={{fcrepo.authUser}}&amp;authPassword={{fcrepo.authPassword}}"/>
                      <convertBodyTo type="org.w3c.dom.Document"/>
                      <to uri="log:?logger=myLogger&amp;level=TRACE"/>
                      <doTry>
                          <log message="Trying {{foxmlXslt.path}}/$simple{header.DSID}.xslt?" loggingLevel="DEBUG" loggerRef="myLogger"/>
                          <recipientList>
                              <simple>xslt:{{foxmlXslt.path}}/$simple{header.DSID}.xslt?transformerFactoryClass=org.apache.xalan.processor.TransformerFactoryImpl</simple>
                          </recipientList>
                          <doCatch>
                              <exception>javax.xml.transform.TransformerException</exception>
                              <exception>java.io.FileNotFoundException</exception>
                              <log message="Exception trying to transform DSID ${header.DSID} on ${header.pid}, possibly there is no stylesheet ${header.DSID}.xslt" loggingLevel="INFO" loggerRef="myLogger"/>
                              <!-- Could not perform the transform, so set the body to blank
                                   otherwise we append the source datastream to the Solr record. -->
                              <setBody><constant></constant></setBody>
                          </doCatch>
                          <doFinally>
                              <to uri="log:?logger=myLogger&amp;level=TRACE"/>
                          </doFinally>
                      </doTry>
                      <doCatch>
                          <exception>org.apache.camel.component.http4.HttpOperationFailedException</exception>
                          <log message="Exception getting datastream ${header.DSID} from object ${header.pid} -- skipping" loggingLevel="INFO" loggerRef="myLogger"/>
                          <setBody><constant></constant></setBody>
                      </doCatch>
                  </doTry>
              </when>
              <when>
                  <simple>${header.mimetype} == 'text/plain'</simple>
                  <doTry>
                      <setHeader headerName="Exchange.HTTP_METHOD">
                          <constant>GET</constant>
                      </setHeader>
                      <setHeader headerName="Exchange.HTTP_PATH">
                          <simple>{{fcrepo.basePath}}/objects/$simple{header.pid}/datastreams/$simple{header.DSID}/content</simple>
                      </setHeader>
                      <log message="Getting datastream ${header.DSID} for ${header.pid} with mimetype ${header.mimetype}" loggingLevel="DEBUG" loggerRef="myLogger"/>
                      <to uri="http4://{{fcrepo.baseUrl}}/?authUsername={{fcrepo.authUser}}&amp;authPassword={{fcrepo.authPassword}}"/>
                      <!-- For a plain text datastream, we must wrap it in an element and strip any invalid XML characters --> 
                      <setBody>
                          <simple>&lt;${header.DSID}&gt;${body.replaceAll("[^\u0009\u000A\u000D\u0020-\uD7FF\uE000-\uFFFD\u10000-\u10FFF]+","")}&lt;/${header.DSID}&gt;</simple>
                      </setBody>
                      <to uri="log:?logger=myLogger&amp;level=TRACE"/>
                      <doTry>
                          <log message="Trying {{foxmlXslt.path}}/$simple{header.DSID}.xslt?" loggingLevel="DEBUG" loggerRef="myLogger"/>
                          <recipientList>
                              <simple>xslt:{{foxmlXslt.path}}/$simple{header.DSID}.xslt?transformerFactoryClass=org.apache.xalan.processor.TransformerFactoryImpl</simple>
                          </recipientList>
                          <doCatch>
                              <exception>javax.xml.transform.TransformerException</exception>
                              <exception>java.io.FileNotFoundException</exception>
                              <log message="Exception trying to transform DSID ${header.DSID} on ${header.pid}, possibly there is no stylesheet ${header.DSID}.xslt" loggingLevel="INFO" loggerRef="myLogger"/>
                              <setBody><constant></constant></setBody>
                          </doCatch>
                          <doFinally>
                              <to uri="log:?logger=myLogger&amp;level=TRACE"/>
                          </doFinally>
                      </doTry>
                      <doCatch>
                          <exception>org.apache.camel.component.http4.HttpOperationFailedException</exception>
                          <log message="Exception getting datastream ${header.DSID} from object ${header.pid} -- skipping" loggingLevel="INFO" loggerRef="myLogger"/>
                          <setBody><constant></constant></setBody>
                      </doCatch>
                  </doTry>
              </when>
              <otherwise>
                  <!-- Not an XML or plain text datastream, so we return nothing -->
                  <setBody><constant></constant></setBody>
              </otherwise>
          </choice>
      </route>
  
      <route id="fedora-delete-multicaster">
          <description>Fedora Message delete multicaster</description>
          <from uri="seda:fedora.delete"/>
          <!-- Not doing multicasting so pass to solr -->
          <to uri="seda:solr.delete"/>
      </route>
 
     <route id="solr-deletion">
         <description>Solr Deletion</description>
         <from uri="seda:solr.delete?blockWhenFull=true&amp;concurrentConsumers={{concurrent.processes}}"/>

         <!-- @see http://camel.apache.org/solr.html for more info -->
         <doTry>
             <setHeader headerName="SolrOperation">
                 <constant>DELETE_BY_ID</constant>
             </setHeader>
             <setBody>
                 <simple>${header.pid}</simple>
             </setBody>
             <to uri="solr://{{solr.baseUrl}}"/>
             <log message="Removed ${header.pid} from Solr" loggingLevel="INFO" loggerRef="myLogger"/>
             <doCatch>
                 <exception>org.apache.solr.common.SolrException</exception>
                 <log message="Solr error on ${header.pid}: ${exception.message}" loggingLevel="ERROR" loggerRef="myLogger"/>
             </doCatch>
         </doTry>
     </route>

     <route id="solr-insertion">
         <description>Solr Insertion</description>
         <from uri="seda:solr.update?blockWhenFull=true&amp;concurrentConsumers={{concurrent.processes}}"/>

         <doTry>
             <to uri="log:?logger=myLogger&amp;level=TRACE"/>
             <setHeader headerName="SolrOperation">
                 <constant>INSERT</constant>
             </setHeader>
             <to uri="solr://{{solr.baseUrl}}"/>
             <log message="Added/Updated ${header.pid} to Solr" loggingLevel="INFO" loggerRef="myLogger"/>
             <doCatch>
                 <exception>org.apache.solr.common.SolrException</exception>
                 <log message="Solr error on ${header.pid}: ${exception.message}" loggingLevel="ERROR" loggerRef="myLogger"/>
             </doCatch>
         </doTry>

     </route>
  </camelContext>
 
</beans>